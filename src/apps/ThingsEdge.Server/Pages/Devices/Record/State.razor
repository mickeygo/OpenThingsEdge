@page "/devices/record/state"
@inherits ProComponentBase
@inject IEquipmentStateService _equipmentStateService

<MCard>
    <MDataTable Stripe
                Headers="_headers"
                Items="_items"
                OnOptionsUpdate="HandleOnOptionsUpdate"
                ServerItemsLength="_totalItemCount"
                Loading="_loading"
                Class="elevation-1">
        <ItemColContent>
            @if (context.Header.Value == nameof(EquipmentStateRecord.RunningState))
            {
                <MChip Color="@GetColor(context.Item.RunningState)">
                    @context.Item.RunningState.DisplayName()
                </MChip>
            }
            else if (context.Header.Value == nameof(EquipmentStateRecord.Duration))
            {
                @(Math.Round(context.Item.Duration / 3600.0, 2))
            }
            else if (context.Header.Value == nameof(EquipmentStateRecord.IsEnded))
            {
                @(context.Item.IsEnded ? "是" : "否")
            }
            else
            {
                @context.Value
            }
        </ItemColContent>
    </MDataTable>
</MCard>

@code {
    private bool _loading = true;
    private int _totalItemCount = 0;

    private IEnumerable<EquipmentStateRecord> _items = new List<EquipmentStateRecord>();

    private List<DataTableHeader<EquipmentStateRecord>> _headers = new()
        {
          new (){ Text = "产线", Value = nameof(EquipmentStateRecord.Line), Width = 100 },
          new (){ Text = "设备名称", Value = nameof(EquipmentStateRecord.EquipmentName), Width = 80 },
          new (){ Text = "运行状态", Value = nameof(EquipmentStateRecord.RunningState), Width = 80 },
          new (){ Text = "开始时间", Value = nameof(EquipmentStateRecord.StartTime), Width = 100 },
          new (){ Text = "结束时间", Value = nameof(EquipmentStateRecord.EndTime), Width = 80 },
          new (){ Text = "是否已结束", Value = nameof(EquipmentStateRecord.IsEnded), Width = 60 },
          new (){ Text = "持续时长(h)", Value = nameof(EquipmentStateRecord.Duration), Width = 80 },
        };

    protected override async Task OnInitializedAsync()
    {
        await SearchAsync(1, 10);
    }

    async Task HandleOnOptionsUpdate(DataOptions options)
    {
        int pageIndex = options.Page;
        int pageSize = options.ItemsPerPage;

        if (pageSize == -1)
        {
            pageSize = _totalItemCount;
        }
        await SearchAsync(pageIndex, pageSize);
    }

    async Task SearchAsync(int pageIndex = 0, int pageSize = 0)
    {
        var pagedList = await _equipmentStateService.GetPagedAsync(new PagedQuery { PageIndex = pageIndex, PageSize = pageSize });

        _items = pagedList.Items;
        _totalItemCount = pagedList.TotalCount;

        _loading = false;

        _ = InvokeAsync(StateHasChanged);
    }

    string GetColor(EquipmentRunningState state) => state switch
    {
        EquipmentRunningState.Running => "green",
        EquipmentRunningState.Warning => "orange",
        EquipmentRunningState.EmergencyStopping => "red",
        _ => "",
    };
}
