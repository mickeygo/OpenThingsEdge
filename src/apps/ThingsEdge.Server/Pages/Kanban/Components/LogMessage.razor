@using ThingsEdge.Router.Model
@using ThingsEdge.Router.Pipe
@implements IDisposable

<MCard Height=320 MaxHeight=320 Class="mx-auto my-auto">
    <MList Dense MaxHeight=320 Class="rounded-4 mt-6" Style="overflow-y:auto;">
        @foreach (var message in _messages)
        {
            <MListItem Style="min-height:24px;">
                <MListItemContent Class="text-body neutral-lighten-2--text">
                    <span>@message.LoggedTime @message.Message</span>
                </MListItemContent>
            </MListItem>
        }
    </MList>
</MCard>

@code {
    private readonly LinkedList<LoggingMessage> _messages = new();
    private readonly CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        //_ = Task.Run(async () =>
        // {
        //     while (!_cts.IsCancellationRequested)
        //     {
        //         await Task.Delay(1000).ConfigureAwait(false);
        //         await ChannelFactory.LoggingChannel.TryWriteAsync(new() { Message = "123456789qwer" }).ConfigureAwait(false);
        //     }
        // });

        await ChannelFactory.LoggingChannel.PollReadAsync(e =>
           {
               InvokeAsync(() =>
                {
                    if (e is not null)
                    {
                        if (_messages.Count >= 32)
                        {
                            _messages.RemoveLast();
                        }

                        _messages.AddFirst(e);
                        StateHasChanged();
                    }
                });
           }, _cts.Token);
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}
